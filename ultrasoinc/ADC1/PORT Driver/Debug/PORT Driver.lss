
PORT Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  00000d12  00000da6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000023  00800092  00800092  00000dd8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dd8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00000e44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b61  00000000  00000000  00001034  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d96  00000000  00000000  00002b95  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fcd  00000000  00000000  0000392b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000048c  00000000  00000000  000048f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000810  00000000  00000000  00004d84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001457  00000000  00000000  00005594  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  000069eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3a 03 	jmp	0x674	; 0x674 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 21 04 	jmp	0x842	; 0x842 <__vector_6>
  1c:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 94 03 	jmp	0x728	; 0x728 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 61 03 	jmp	0x6c2	; 0x6c2 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e1       	ldi	r30, 0x12	; 18
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 39       	cpi	r26, 0x92	; 146
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e9       	ldi	r26, 0x92	; 146
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 3b       	cpi	r26, 0xB5	; 181
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 87 06 	jmp	0xd0e	; 0xd0e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

int main(void)
{
	uint32 DISTANCE =0;

   PORT_Init();
  92:	0e 94 99 04 	call	0x932	; 0x932 <PORT_Init>
 IRQH_SetGlobalInterrupts(INTERRUPT_ENABLE);
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	0e 94 2e 03 	call	0x65c	; 0x65c <IRQH_SetGlobalInterrupts>
 GPT_INIT();
  9c:	0e 94 bd 02 	call	0x57a	; 0x57a <GPT_INIT>
 ICU_INIT();
  a0:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <ICU_INIT>
 LCD_Init();
  a4:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCD_Init>


   while (1)
   {
	   LCD_GoTo(0,1);
  a8:	61 e0       	ldi	r22, 0x01	; 1
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	0e 94 ef 01 	call	0x3de	; 0x3de <LCD_GoTo>
	   LCD_WriteString("DIstance:");
  b0:	88 e8       	ldi	r24, 0x88	; 136
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 4e 01 	call	0x29c	; 0x29c <LCD_WriteString>
	   ultrasonic_trigger();
  b8:	0e 94 14 02 	call	0x428	; 0x428 <ultrasonic_trigger>
	   DISTANCE=ultrasonic_calculateDistance();
  bc:	0e 94 23 02 	call	0x446	; 0x446 <ultrasonic_calculateDistance>
  c0:	6b 01       	movw	r12, r22
  c2:	7c 01       	movw	r14, r24
		   LCD_GoTo(0,11);
  c4:	6b e0       	ldi	r22, 0x0B	; 11
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	0e 94 ef 01 	call	0x3de	; 0x3de <LCD_GoTo>
		   LCD_WriteInteger(DISTANCE);
  cc:	c7 01       	movw	r24, r14
  ce:	b6 01       	movw	r22, r12
  d0:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <LCD_WriteInteger>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	2f ef       	ldi	r18, 0xFF	; 255
  d6:	89 e6       	ldi	r24, 0x69	; 105
  d8:	98 e1       	ldi	r25, 0x18	; 24
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x48>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x52>
  e4:	00 00       	nop
		   _delay_ms(500);
		  LCD_Clear();
  e6:	0e 94 0a 02 	call	0x414	; 0x414 <LCD_Clear>
  ea:	de cf       	rjmp	.-68     	; 0xa8 <main+0x16>

000000ec <LCD_WriteCommand>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void LCD_WriteCommand(uint8 cmd)
{
  ec:	cf 93       	push	r28
  ee:	c8 2f       	mov	r28, r24
	DIO_WriteChannel(LCD_RS_PIN , PIN_LOW);
  f0:	60 e0       	ldi	r22, 0x00	; 0
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	0e 94 36 02 	call	0x46c	; 0x46c <DIO_WriteChannel>
	DIO_WriteChannel(LCD_E_PIN , PIN_LOW);
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	82 e0       	ldi	r24, 0x02	; 2
  fc:	0e 94 36 02 	call	0x46c	; 0x46c <DIO_WriteChannel>
	
	DIO_WriteChannel(LCD_D4_PIN , GET_BIT(cmd , 4));
 100:	c4 fb       	bst	r28, 4
 102:	66 27       	eor	r22, r22
 104:	60 f9       	bld	r22, 0
 106:	83 e0       	ldi	r24, 0x03	; 3
 108:	0e 94 36 02 	call	0x46c	; 0x46c <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D5_PIN , GET_BIT(cmd , 5));
 10c:	c5 fb       	bst	r28, 5
 10e:	66 27       	eor	r22, r22
 110:	60 f9       	bld	r22, 0
 112:	84 e0       	ldi	r24, 0x04	; 4
 114:	0e 94 36 02 	call	0x46c	; 0x46c <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D6_PIN , GET_BIT(cmd , 6));
 118:	c6 fb       	bst	r28, 6
 11a:	66 27       	eor	r22, r22
 11c:	60 f9       	bld	r22, 0
 11e:	85 e0       	ldi	r24, 0x05	; 5
 120:	0e 94 36 02 	call	0x46c	; 0x46c <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D7_PIN , GET_BIT(cmd , 7));
 124:	6c 2f       	mov	r22, r28
 126:	66 1f       	adc	r22, r22
 128:	66 27       	eor	r22, r22
 12a:	66 1f       	adc	r22, r22
 12c:	86 e0       	ldi	r24, 0x06	; 6
 12e:	0e 94 36 02 	call	0x46c	; 0x46c <DIO_WriteChannel>
	
	DIO_WriteChannel(LCD_E_PIN , PIN_HIGH);
 132:	61 e0       	ldi	r22, 0x01	; 1
 134:	82 e0       	ldi	r24, 0x02	; 2
 136:	0e 94 36 02 	call	0x46c	; 0x46c <DIO_WriteChannel>
 13a:	8f e9       	ldi	r24, 0x9F	; 159
 13c:	9f e0       	ldi	r25, 0x0F	; 15
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <LCD_WriteCommand+0x52>
 142:	00 c0       	rjmp	.+0      	; 0x144 <LCD_WriteCommand+0x58>
 144:	00 00       	nop
	_delay_ms(1);
	DIO_WriteChannel(LCD_E_PIN , PIN_LOW);
 146:	60 e0       	ldi	r22, 0x00	; 0
 148:	82 e0       	ldi	r24, 0x02	; 2
 14a:	0e 94 36 02 	call	0x46c	; 0x46c <DIO_WriteChannel>
	
	DIO_WriteChannel(LCD_D4_PIN , GET_BIT(cmd , 0));
 14e:	6c 2f       	mov	r22, r28
 150:	61 70       	andi	r22, 0x01	; 1
 152:	83 e0       	ldi	r24, 0x03	; 3
 154:	0e 94 36 02 	call	0x46c	; 0x46c <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D5_PIN , GET_BIT(cmd , 1));
 158:	c1 fb       	bst	r28, 1
 15a:	66 27       	eor	r22, r22
 15c:	60 f9       	bld	r22, 0
 15e:	84 e0       	ldi	r24, 0x04	; 4
 160:	0e 94 36 02 	call	0x46c	; 0x46c <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D6_PIN , GET_BIT(cmd , 2));
 164:	c2 fb       	bst	r28, 2
 166:	66 27       	eor	r22, r22
 168:	60 f9       	bld	r22, 0
 16a:	85 e0       	ldi	r24, 0x05	; 5
 16c:	0e 94 36 02 	call	0x46c	; 0x46c <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D7_PIN , GET_BIT(cmd , 3));
 170:	c3 fb       	bst	r28, 3
 172:	66 27       	eor	r22, r22
 174:	60 f9       	bld	r22, 0
 176:	86 e0       	ldi	r24, 0x06	; 6
 178:	0e 94 36 02 	call	0x46c	; 0x46c <DIO_WriteChannel>
	
	DIO_WriteChannel(LCD_E_PIN , PIN_HIGH);
 17c:	61 e0       	ldi	r22, 0x01	; 1
 17e:	82 e0       	ldi	r24, 0x02	; 2
 180:	0e 94 36 02 	call	0x46c	; 0x46c <DIO_WriteChannel>
 184:	8f e9       	ldi	r24, 0x9F	; 159
 186:	9f e0       	ldi	r25, 0x0F	; 15
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <LCD_WriteCommand+0x9c>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <LCD_WriteCommand+0xa2>
 18e:	00 00       	nop
	_delay_ms(1);
	DIO_WriteChannel(LCD_E_PIN , PIN_LOW);
 190:	60 e0       	ldi	r22, 0x00	; 0
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	0e 94 36 02 	call	0x46c	; 0x46c <DIO_WriteChannel>
 198:	8f e1       	ldi	r24, 0x1F	; 31
 19a:	9e e4       	ldi	r25, 0x4E	; 78
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <LCD_WriteCommand+0xb0>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <LCD_WriteCommand+0xb6>
 1a2:	00 00       	nop
	
	_delay_ms(5);
}
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <LCD_Init>:
*******************************************************************************/
void LCD_Init(void)
{
	#if (LCD_OPERATION_MODE == 4)
	/*LCD 4 BIT MODE COMMANDS*/
	LCD_WriteCommand(0X33);
 1a8:	83 e3       	ldi	r24, 0x33	; 51
 1aa:	0e 94 76 00 	call	0xec	; 0xec <LCD_WriteCommand>
	LCD_WriteCommand(0X32);
 1ae:	82 e3       	ldi	r24, 0x32	; 50
 1b0:	0e 94 76 00 	call	0xec	; 0xec <LCD_WriteCommand>
	LCD_WriteCommand(0X28); // 2Lines and 5*8 dots
 1b4:	88 e2       	ldi	r24, 0x28	; 40
 1b6:	0e 94 76 00 	call	0xec	; 0xec <LCD_WriteCommand>
	
	LCD_WriteCommand(0X01); // Clear Display
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	0e 94 76 00 	call	0xec	; 0xec <LCD_WriteCommand>
	LCD_WriteCommand(0X06); // Increase Cursor to the Right, and Shift entire Display OFF
 1c0:	86 e0       	ldi	r24, 0x06	; 6
 1c2:	0e 94 76 00 	call	0xec	; 0xec <LCD_WriteCommand>
	LCD_WriteCommand(0x0C); // Display ON , Cursor OFF , Cursor Blink OFF
 1c6:	8c e0       	ldi	r24, 0x0C	; 12
 1c8:	0e 94 76 00 	call	0xec	; 0xec <LCD_WriteCommand>
	LCD_WriteCommand(0X02); // Return Home Instruction 
 1cc:	82 e0       	ldi	r24, 0x02	; 2
 1ce:	0e 94 76 00 	call	0xec	; 0xec <LCD_WriteCommand>
 1d2:	8f e1       	ldi	r24, 0x1F	; 31
 1d4:	9e e4       	ldi	r25, 0x4E	; 78
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <LCD_Init+0x2e>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <LCD_Init+0x34>
 1dc:	00 00       	nop
 1de:	08 95       	ret

000001e0 <LCD_WriteChar>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void LCD_WriteChar(uint8 Data)
{
 1e0:	cf 93       	push	r28
 1e2:	c8 2f       	mov	r28, r24
	DIO_WriteChannel(LCD_RS_PIN , PIN_HIGH);
 1e4:	61 e0       	ldi	r22, 0x01	; 1
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	0e 94 36 02 	call	0x46c	; 0x46c <DIO_WriteChannel>
	DIO_WriteChannel(LCD_E_PIN , PIN_LOW);
 1ec:	60 e0       	ldi	r22, 0x00	; 0
 1ee:	82 e0       	ldi	r24, 0x02	; 2
 1f0:	0e 94 36 02 	call	0x46c	; 0x46c <DIO_WriteChannel>
	
	DIO_WriteChannel(LCD_D4_PIN , GET_BIT(Data , 4));
 1f4:	c4 fb       	bst	r28, 4
 1f6:	66 27       	eor	r22, r22
 1f8:	60 f9       	bld	r22, 0
 1fa:	83 e0       	ldi	r24, 0x03	; 3
 1fc:	0e 94 36 02 	call	0x46c	; 0x46c <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D5_PIN , GET_BIT(Data , 5));
 200:	c5 fb       	bst	r28, 5
 202:	66 27       	eor	r22, r22
 204:	60 f9       	bld	r22, 0
 206:	84 e0       	ldi	r24, 0x04	; 4
 208:	0e 94 36 02 	call	0x46c	; 0x46c <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D6_PIN , GET_BIT(Data , 6));
 20c:	c6 fb       	bst	r28, 6
 20e:	66 27       	eor	r22, r22
 210:	60 f9       	bld	r22, 0
 212:	85 e0       	ldi	r24, 0x05	; 5
 214:	0e 94 36 02 	call	0x46c	; 0x46c <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D7_PIN , GET_BIT(Data , 7));
 218:	6c 2f       	mov	r22, r28
 21a:	66 1f       	adc	r22, r22
 21c:	66 27       	eor	r22, r22
 21e:	66 1f       	adc	r22, r22
 220:	86 e0       	ldi	r24, 0x06	; 6
 222:	0e 94 36 02 	call	0x46c	; 0x46c <DIO_WriteChannel>
	
	DIO_WriteChannel(LCD_E_PIN , PIN_HIGH);
 226:	61 e0       	ldi	r22, 0x01	; 1
 228:	82 e0       	ldi	r24, 0x02	; 2
 22a:	0e 94 36 02 	call	0x46c	; 0x46c <DIO_WriteChannel>
 22e:	8f e9       	ldi	r24, 0x9F	; 159
 230:	9f e0       	ldi	r25, 0x0F	; 15
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <LCD_WriteChar+0x52>
 236:	00 c0       	rjmp	.+0      	; 0x238 <LCD_WriteChar+0x58>
 238:	00 00       	nop
	_delay_ms(1);
	DIO_WriteChannel(LCD_E_PIN , PIN_LOW);
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	82 e0       	ldi	r24, 0x02	; 2
 23e:	0e 94 36 02 	call	0x46c	; 0x46c <DIO_WriteChannel>
	
	DIO_WriteChannel(LCD_D4_PIN , GET_BIT(Data , 0));
 242:	6c 2f       	mov	r22, r28
 244:	61 70       	andi	r22, 0x01	; 1
 246:	83 e0       	ldi	r24, 0x03	; 3
 248:	0e 94 36 02 	call	0x46c	; 0x46c <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D5_PIN , GET_BIT(Data , 1));
 24c:	c1 fb       	bst	r28, 1
 24e:	66 27       	eor	r22, r22
 250:	60 f9       	bld	r22, 0
 252:	84 e0       	ldi	r24, 0x04	; 4
 254:	0e 94 36 02 	call	0x46c	; 0x46c <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D6_PIN , GET_BIT(Data , 2));
 258:	c2 fb       	bst	r28, 2
 25a:	66 27       	eor	r22, r22
 25c:	60 f9       	bld	r22, 0
 25e:	85 e0       	ldi	r24, 0x05	; 5
 260:	0e 94 36 02 	call	0x46c	; 0x46c <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D7_PIN , GET_BIT(Data , 3));
 264:	c3 fb       	bst	r28, 3
 266:	66 27       	eor	r22, r22
 268:	60 f9       	bld	r22, 0
 26a:	86 e0       	ldi	r24, 0x06	; 6
 26c:	0e 94 36 02 	call	0x46c	; 0x46c <DIO_WriteChannel>
	
	DIO_WriteChannel(LCD_E_PIN , PIN_HIGH);
 270:	61 e0       	ldi	r22, 0x01	; 1
 272:	82 e0       	ldi	r24, 0x02	; 2
 274:	0e 94 36 02 	call	0x46c	; 0x46c <DIO_WriteChannel>
 278:	8f e9       	ldi	r24, 0x9F	; 159
 27a:	9f e0       	ldi	r25, 0x0F	; 15
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <LCD_WriteChar+0x9c>
 280:	00 c0       	rjmp	.+0      	; 0x282 <LCD_WriteChar+0xa2>
 282:	00 00       	nop
	_delay_ms(1);
	DIO_WriteChannel(LCD_E_PIN , PIN_LOW);
 284:	60 e0       	ldi	r22, 0x00	; 0
 286:	82 e0       	ldi	r24, 0x02	; 2
 288:	0e 94 36 02 	call	0x46c	; 0x46c <DIO_WriteChannel>
 28c:	8f e1       	ldi	r24, 0x1F	; 31
 28e:	9e e4       	ldi	r25, 0x4E	; 78
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <LCD_WriteChar+0xb0>
 294:	00 c0       	rjmp	.+0      	; 0x296 <LCD_WriteChar+0xb6>
 296:	00 00       	nop
	
	_delay_ms(5);
}
 298:	cf 91       	pop	r28
 29a:	08 95       	ret

0000029c <LCD_WriteString>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void LCD_WriteString(uint8* str)
{
 29c:	0f 93       	push	r16
 29e:	1f 93       	push	r17
 2a0:	cf 93       	push	r28
 2a2:	fc 01       	movw	r30, r24
	uint8 i=0;
	while(str[i]!='\0')
 2a4:	80 81       	ld	r24, Z
 2a6:	88 23       	and	r24, r24
 2a8:	59 f0       	breq	.+22     	; 0x2c0 <LCD_WriteString+0x24>
 2aa:	8f 01       	movw	r16, r30
 2ac:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_WriteChar(str[i]);
 2ae:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_WriteChar>
		i++;
 2b2:	cf 5f       	subi	r28, 0xFF	; 255
*                                    E_NOT_OK
*******************************************************************************/
void LCD_WriteString(uint8* str)
{
	uint8 i=0;
	while(str[i]!='\0')
 2b4:	f8 01       	movw	r30, r16
 2b6:	ec 0f       	add	r30, r28
 2b8:	f1 1d       	adc	r31, r1
 2ba:	80 81       	ld	r24, Z
 2bc:	81 11       	cpse	r24, r1
 2be:	f7 cf       	rjmp	.-18     	; 0x2ae <LCD_WriteString+0x12>
 2c0:	8f e1       	ldi	r24, 0x1F	; 31
 2c2:	9e e4       	ldi	r25, 0x4E	; 78
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <LCD_WriteString+0x28>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <LCD_WriteString+0x2e>
 2ca:	00 00       	nop
	{
		LCD_WriteChar(str[i]);
		i++;
	}
	_delay_ms(5);
}
 2cc:	cf 91       	pop	r28
 2ce:	1f 91       	pop	r17
 2d0:	0f 91       	pop	r16
 2d2:	08 95       	ret

000002d4 <LCD_WriteInteger>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void LCD_WriteInteger(sint32 num)
{
 2d4:	8f 92       	push	r8
 2d6:	9f 92       	push	r9
 2d8:	af 92       	push	r10
 2da:	bf 92       	push	r11
 2dc:	cf 92       	push	r12
 2de:	df 92       	push	r13
 2e0:	ef 92       	push	r14
 2e2:	ff 92       	push	r15
 2e4:	0f 93       	push	r16
 2e6:	1f 93       	push	r17
 2e8:	8b 01       	movw	r16, r22
 2ea:	9c 01       	movw	r18, r24
	 sint32 temp = 1;
	 if(num == 0)
 2ec:	61 15       	cp	r22, r1
 2ee:	71 05       	cpc	r23, r1
 2f0:	81 05       	cpc	r24, r1
 2f2:	91 05       	cpc	r25, r1
 2f4:	21 f4       	brne	.+8      	; 0x2fe <LCD_WriteInteger+0x2a>
	 {
		 LCD_WriteChar('0');
 2f6:	80 e3       	ldi	r24, 0x30	; 48
 2f8:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_WriteChar>
 2fc:	5f c0       	rjmp	.+190    	; 0x3bc <LCD_WriteInteger+0xe8>
	 }

	 else if(num < 0)
 2fe:	99 23       	and	r25, r25
 300:	34 f0       	brlt	.+12     	; 0x30e <LCD_WriteInteger+0x3a>
		 num *= -1;
	 }

	 else{
		 
		 while(num > 0)
 302:	16 16       	cp	r1, r22
 304:	17 06       	cpc	r1, r23
 306:	18 06       	cpc	r1, r24
 308:	19 06       	cpc	r1, r25
 30a:	2c f0       	brlt	.+10     	; 0x316 <LCD_WriteInteger+0x42>
 30c:	57 c0       	rjmp	.+174    	; 0x3bc <LCD_WriteInteger+0xe8>
		 LCD_WriteChar('0');
	 }

	 else if(num < 0)
	 {
		 LCD_WriteChar('-');
 30e:	8d e2       	ldi	r24, 0x2D	; 45
 310:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_WriteChar>
 314:	53 c0       	rjmp	.+166    	; 0x3bc <LCD_WriteInteger+0xe8>
		 num *= -1;
	 }

	 else{
		 
		 while(num > 0)
 316:	61 e0       	ldi	r22, 0x01	; 1
 318:	70 e0       	ldi	r23, 0x00	; 0
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	90 e0       	ldi	r25, 0x00	; 0
		 {
			 temp = ((temp*10) + (num%10));
 31e:	0f 2e       	mov	r0, r31
 320:	fa e0       	ldi	r31, 0x0A	; 10
 322:	8f 2e       	mov	r8, r31
 324:	91 2c       	mov	r9, r1
 326:	a1 2c       	mov	r10, r1
 328:	b1 2c       	mov	r11, r1
 32a:	f0 2d       	mov	r31, r0
 32c:	dc 01       	movw	r26, r24
 32e:	cb 01       	movw	r24, r22
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	aa 1f       	adc	r26, r26
 336:	bb 1f       	adc	r27, r27
 338:	6c 01       	movw	r12, r24
 33a:	7d 01       	movw	r14, r26
 33c:	cc 0c       	add	r12, r12
 33e:	dd 1c       	adc	r13, r13
 340:	ee 1c       	adc	r14, r14
 342:	ff 1c       	adc	r15, r15
 344:	cc 0c       	add	r12, r12
 346:	dd 1c       	adc	r13, r13
 348:	ee 1c       	adc	r14, r14
 34a:	ff 1c       	adc	r15, r15
 34c:	c8 0e       	add	r12, r24
 34e:	d9 1e       	adc	r13, r25
 350:	ea 1e       	adc	r14, r26
 352:	fb 1e       	adc	r15, r27
 354:	c9 01       	movw	r24, r18
 356:	b8 01       	movw	r22, r16
 358:	a5 01       	movw	r20, r10
 35a:	94 01       	movw	r18, r8
 35c:	0e 94 46 06 	call	0xc8c	; 0xc8c <__divmodsi4>
 360:	6c 0d       	add	r22, r12
 362:	7d 1d       	adc	r23, r13
 364:	8e 1d       	adc	r24, r14
 366:	9f 1d       	adc	r25, r15
			 num /= 10;
 368:	02 2f       	mov	r16, r18
 36a:	13 2f       	mov	r17, r19
 36c:	24 2f       	mov	r18, r20
 36e:	35 2f       	mov	r19, r21
		 num *= -1;
	 }

	 else{
		 
		 while(num > 0)
 370:	10 16       	cp	r1, r16
 372:	11 06       	cpc	r1, r17
 374:	12 06       	cpc	r1, r18
 376:	13 06       	cpc	r1, r19
 378:	cc f2       	brlt	.-78     	; 0x32c <LCD_WriteInteger+0x58>
		 {
			 temp = ((temp*10) + (num%10));
			 num /= 10;
		 }

		 while(temp > 1 )
 37a:	62 30       	cpi	r22, 0x02	; 2
 37c:	71 05       	cpc	r23, r1
 37e:	81 05       	cpc	r24, r1
 380:	91 05       	cpc	r25, r1
 382:	e4 f0       	brlt	.+56     	; 0x3bc <LCD_WriteInteger+0xe8>
		 {
			 LCD_WriteChar(((temp%10)+48));
 384:	0f 2e       	mov	r0, r31
 386:	fa e0       	ldi	r31, 0x0A	; 10
 388:	8f 2e       	mov	r8, r31
 38a:	91 2c       	mov	r9, r1
 38c:	a1 2c       	mov	r10, r1
 38e:	b1 2c       	mov	r11, r1
 390:	f0 2d       	mov	r31, r0
 392:	a5 01       	movw	r20, r10
 394:	94 01       	movw	r18, r8
 396:	0e 94 46 06 	call	0xc8c	; 0xc8c <__divmodsi4>
 39a:	e2 2e       	mov	r14, r18
 39c:	f3 2e       	mov	r15, r19
 39e:	04 2f       	mov	r16, r20
 3a0:	15 2f       	mov	r17, r21
 3a2:	80 e3       	ldi	r24, 0x30	; 48
 3a4:	86 0f       	add	r24, r22
 3a6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_WriteChar>
			 temp /= 10;
 3aa:	6e 2d       	mov	r22, r14
 3ac:	7f 2d       	mov	r23, r15
 3ae:	80 2f       	mov	r24, r16
 3b0:	91 2f       	mov	r25, r17
		 {
			 temp = ((temp*10) + (num%10));
			 num /= 10;
		 }

		 while(temp > 1 )
 3b2:	62 30       	cpi	r22, 0x02	; 2
 3b4:	71 05       	cpc	r23, r1
 3b6:	81 05       	cpc	r24, r1
 3b8:	91 05       	cpc	r25, r1
 3ba:	5c f7       	brge	.-42     	; 0x392 <LCD_WriteInteger+0xbe>
 3bc:	8f e1       	ldi	r24, 0x1F	; 31
 3be:	9e e4       	ldi	r25, 0x4E	; 78
 3c0:	01 97       	sbiw	r24, 0x01	; 1
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <LCD_WriteInteger+0xec>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <LCD_WriteInteger+0xf2>
 3c6:	00 00       	nop
			 LCD_WriteChar(((temp%10)+48));
			 temp /= 10;
		 }
	 }
	 _delay_ms(5);
}
 3c8:	1f 91       	pop	r17
 3ca:	0f 91       	pop	r16
 3cc:	ff 90       	pop	r15
 3ce:	ef 90       	pop	r14
 3d0:	df 90       	pop	r13
 3d2:	cf 90       	pop	r12
 3d4:	bf 90       	pop	r11
 3d6:	af 90       	pop	r10
 3d8:	9f 90       	pop	r9
 3da:	8f 90       	pop	r8
 3dc:	08 95       	ret

000003de <LCD_GoTo>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void LCD_GoTo(uint8 Row, uint8 Column)
{
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
 3e2:	00 d0       	rcall	.+0      	; 0x3e4 <LCD_GoTo+0x6>
 3e4:	cd b7       	in	r28, 0x3d	; 61
 3e6:	de b7       	in	r29, 0x3e	; 62
	uint8 LCD_Loc[2]={0X80 , 0XC0};	
 3e8:	90 e8       	ldi	r25, 0x80	; 128
 3ea:	99 83       	std	Y+1, r25	; 0x01
 3ec:	90 ec       	ldi	r25, 0xC0	; 192
 3ee:	9a 83       	std	Y+2, r25	; 0x02
	LCD_WriteCommand(LCD_Loc[Row] + Column);
 3f0:	fe 01       	movw	r30, r28
 3f2:	e8 0f       	add	r30, r24
 3f4:	f1 1d       	adc	r31, r1
 3f6:	81 81       	ldd	r24, Z+1	; 0x01
 3f8:	86 0f       	add	r24, r22
 3fa:	0e 94 76 00 	call	0xec	; 0xec <LCD_WriteCommand>
 3fe:	8f e1       	ldi	r24, 0x1F	; 31
 400:	9e e4       	ldi	r25, 0x4E	; 78
 402:	01 97       	sbiw	r24, 0x01	; 1
 404:	f1 f7       	brne	.-4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 406:	00 c0       	rjmp	.+0      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 408:	00 00       	nop
	_delay_ms(5);
}
 40a:	0f 90       	pop	r0
 40c:	0f 90       	pop	r0
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	08 95       	ret

00000414 <LCD_Clear>:
*                                    E_NOT_OK
*******************************************************************************/
void LCD_Clear(void)
{
	//command to clear LCD
	LCD_WriteCommand(0X01);
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	0e 94 76 00 	call	0xec	; 0xec <LCD_WriteCommand>
 41a:	8f e1       	ldi	r24, 0x1F	; 31
 41c:	9e e4       	ldi	r25, 0x4E	; 78
 41e:	01 97       	sbiw	r24, 0x01	; 1
 420:	f1 f7       	brne	.-4      	; 0x41e <LCD_Clear+0xa>
 422:	00 c0       	rjmp	.+0      	; 0x424 <LCD_Clear+0x10>
 424:	00 00       	nop
 426:	08 95       	ret

00000428 <ultrasonic_trigger>:
* \Parameters (out): None                                                      
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK                                  
*******************************************************************************/
void ultrasonic_trigger(void){
	DIO_WriteChannel(PORTD_PIN4,PIN_HIGH);
 428:	61 e0       	ldi	r22, 0x01	; 1
 42a:	8c e1       	ldi	r24, 0x1C	; 28
 42c:	0e 94 36 02 	call	0x46c	; 0x46c <DIO_WriteChannel>
 430:	8f e3       	ldi	r24, 0x3F	; 63
 432:	9c e9       	ldi	r25, 0x9C	; 156
 434:	01 97       	sbiw	r24, 0x01	; 1
 436:	f1 f7       	brne	.-4      	; 0x434 <ultrasonic_trigger+0xc>
 438:	00 c0       	rjmp	.+0      	; 0x43a <ultrasonic_trigger+0x12>
 43a:	00 00       	nop
	_delay_ms(10);
	DIO_WriteChannel(PORTD_PIN4,PIN_LOW);
 43c:	60 e0       	ldi	r22, 0x00	; 0
 43e:	8c e1       	ldi	r24, 0x1C	; 28
 440:	0e 94 36 02 	call	0x46c	; 0x46c <DIO_WriteChannel>
 444:	08 95       	ret

00000446 <ultrasonic_calculateDistance>:
*                                    E_NOT_OK
*******************************************************************************/
uint32 ultrasonic_calculateDistance(void){
	uint32 calculated_time=0;
	uint32 calculated_Distance =0;
	calculated_time =ICU_CAPTURETIME();
 446:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <ICU_CAPTURETIME>
	calculated_Distance =((calculated_time*0.034)/2); 
	return calculated_Distance;
 44a:	0e 94 4b 05 	call	0xa96	; 0xa96 <__floatunsisf>
 44e:	26 e9       	ldi	r18, 0x96	; 150
 450:	33 e4       	ldi	r19, 0x43	; 67
 452:	4b e0       	ldi	r20, 0x0B	; 11
 454:	5d e3       	ldi	r21, 0x3D	; 61
 456:	0e 94 b1 05 	call	0xb62	; 0xb62 <__mulsf3>
 45a:	20 e0       	ldi	r18, 0x00	; 0
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	40 e0       	ldi	r20, 0x00	; 0
 460:	5f e3       	ldi	r21, 0x3F	; 63
 462:	0e 94 b1 05 	call	0xb62	; 0xb62 <__mulsf3>
 466:	0e 94 1c 05 	call	0xa38	; 0xa38 <__fixunssfsi>
}
 46a:	08 95       	ret

0000046c <DIO_WriteChannel>:
*                                    E_NOT_OK
*******************************************************************************/
void DIO_WriteChannel (uint8 Pin_Order, PIN_VAL_e Pin_Val)
{
	uint8 PORT =0, PIN=0 ;
	PORT= Pin_Order / NUMBER_OF_PORT_PINS;
 46c:	98 2f       	mov	r25, r24
 46e:	96 95       	lsr	r25
 470:	96 95       	lsr	r25
 472:	96 95       	lsr	r25
	PIN=  Pin_Order  % NUMBER_OF_PORT_PINS;
 474:	87 70       	andi	r24, 0x07	; 7
	
	switch (Pin_Val)
 476:	66 23       	and	r22, r22
 478:	09 f4       	brne	.+2      	; 0x47c <DIO_WriteChannel+0x10>
 47a:	3f c0       	rjmp	.+126    	; 0x4fa <DIO_WriteChannel+0x8e>
 47c:	61 30       	cpi	r22, 0x01	; 1
 47e:	09 f0       	breq	.+2      	; 0x482 <DIO_WriteChannel+0x16>
 480:	7b c0       	rjmp	.+246    	; 0x578 <DIO_WriteChannel+0x10c>
	{
		case PIN_HIGH :
		switch(PORT)
 482:	91 30       	cpi	r25, 0x01	; 1
 484:	99 f0       	breq	.+38     	; 0x4ac <DIO_WriteChannel+0x40>
 486:	28 f0       	brcs	.+10     	; 0x492 <DIO_WriteChannel+0x26>
 488:	92 30       	cpi	r25, 0x02	; 2
 48a:	e9 f0       	breq	.+58     	; 0x4c6 <DIO_WriteChannel+0x5a>
 48c:	93 30       	cpi	r25, 0x03	; 3
 48e:	41 f1       	breq	.+80     	; 0x4e0 <DIO_WriteChannel+0x74>
 490:	08 95       	ret
		{
			case 0:
			SET_BIT (PORTA , PIN);
 492:	4b b3       	in	r20, 0x1b	; 27
 494:	21 e0       	ldi	r18, 0x01	; 1
 496:	30 e0       	ldi	r19, 0x00	; 0
 498:	b9 01       	movw	r22, r18
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <DIO_WriteChannel+0x34>
 49c:	66 0f       	add	r22, r22
 49e:	77 1f       	adc	r23, r23
 4a0:	8a 95       	dec	r24
 4a2:	e2 f7       	brpl	.-8      	; 0x49c <DIO_WriteChannel+0x30>
 4a4:	cb 01       	movw	r24, r22
 4a6:	84 2b       	or	r24, r20
 4a8:	8b bb       	out	0x1b, r24	; 27
			break;
 4aa:	08 95       	ret
			case 1:
			SET_BIT (PORTB , PIN);
 4ac:	48 b3       	in	r20, 0x18	; 24
 4ae:	21 e0       	ldi	r18, 0x01	; 1
 4b0:	30 e0       	ldi	r19, 0x00	; 0
 4b2:	b9 01       	movw	r22, r18
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <DIO_WriteChannel+0x4e>
 4b6:	66 0f       	add	r22, r22
 4b8:	77 1f       	adc	r23, r23
 4ba:	8a 95       	dec	r24
 4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <DIO_WriteChannel+0x4a>
 4be:	cb 01       	movw	r24, r22
 4c0:	84 2b       	or	r24, r20
 4c2:	88 bb       	out	0x18, r24	; 24
			break;
 4c4:	08 95       	ret
			case 2:
			SET_BIT (PORTC , PIN);
 4c6:	45 b3       	in	r20, 0x15	; 21
 4c8:	21 e0       	ldi	r18, 0x01	; 1
 4ca:	30 e0       	ldi	r19, 0x00	; 0
 4cc:	b9 01       	movw	r22, r18
 4ce:	02 c0       	rjmp	.+4      	; 0x4d4 <DIO_WriteChannel+0x68>
 4d0:	66 0f       	add	r22, r22
 4d2:	77 1f       	adc	r23, r23
 4d4:	8a 95       	dec	r24
 4d6:	e2 f7       	brpl	.-8      	; 0x4d0 <DIO_WriteChannel+0x64>
 4d8:	cb 01       	movw	r24, r22
 4da:	84 2b       	or	r24, r20
 4dc:	85 bb       	out	0x15, r24	; 21
			break;
 4de:	08 95       	ret
			case 3:
			SET_BIT (PORTD , PIN);
 4e0:	42 b3       	in	r20, 0x12	; 18
 4e2:	21 e0       	ldi	r18, 0x01	; 1
 4e4:	30 e0       	ldi	r19, 0x00	; 0
 4e6:	b9 01       	movw	r22, r18
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <DIO_WriteChannel+0x82>
 4ea:	66 0f       	add	r22, r22
 4ec:	77 1f       	adc	r23, r23
 4ee:	8a 95       	dec	r24
 4f0:	e2 f7       	brpl	.-8      	; 0x4ea <DIO_WriteChannel+0x7e>
 4f2:	cb 01       	movw	r24, r22
 4f4:	84 2b       	or	r24, r20
 4f6:	82 bb       	out	0x12, r24	; 18
			break;
 4f8:	08 95       	ret
			break;
		}
		break;
		
		case PIN_LOW :
		switch(PORT)
 4fa:	91 30       	cpi	r25, 0x01	; 1
 4fc:	a1 f0       	breq	.+40     	; 0x526 <DIO_WriteChannel+0xba>
 4fe:	28 f0       	brcs	.+10     	; 0x50a <DIO_WriteChannel+0x9e>
 500:	92 30       	cpi	r25, 0x02	; 2
 502:	f9 f0       	breq	.+62     	; 0x542 <DIO_WriteChannel+0xd6>
 504:	93 30       	cpi	r25, 0x03	; 3
 506:	59 f1       	breq	.+86     	; 0x55e <DIO_WriteChannel+0xf2>
 508:	08 95       	ret
		{
			case 0:
			CLR_BIT (PORTA , PIN);
 50a:	4b b3       	in	r20, 0x1b	; 27
 50c:	21 e0       	ldi	r18, 0x01	; 1
 50e:	30 e0       	ldi	r19, 0x00	; 0
 510:	b9 01       	movw	r22, r18
 512:	02 c0       	rjmp	.+4      	; 0x518 <DIO_WriteChannel+0xac>
 514:	66 0f       	add	r22, r22
 516:	77 1f       	adc	r23, r23
 518:	8a 95       	dec	r24
 51a:	e2 f7       	brpl	.-8      	; 0x514 <DIO_WriteChannel+0xa8>
 51c:	cb 01       	movw	r24, r22
 51e:	80 95       	com	r24
 520:	84 23       	and	r24, r20
 522:	8b bb       	out	0x1b, r24	; 27
			break;
 524:	08 95       	ret
			case 1:
			CLR_BIT (PORTB , PIN);
 526:	48 b3       	in	r20, 0x18	; 24
 528:	21 e0       	ldi	r18, 0x01	; 1
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	b9 01       	movw	r22, r18
 52e:	02 c0       	rjmp	.+4      	; 0x534 <DIO_WriteChannel+0xc8>
 530:	66 0f       	add	r22, r22
 532:	77 1f       	adc	r23, r23
 534:	8a 95       	dec	r24
 536:	e2 f7       	brpl	.-8      	; 0x530 <DIO_WriteChannel+0xc4>
 538:	cb 01       	movw	r24, r22
 53a:	80 95       	com	r24
 53c:	84 23       	and	r24, r20
 53e:	88 bb       	out	0x18, r24	; 24
			break;
 540:	08 95       	ret
			case 2:
			CLR_BIT (PORTC , PIN);
 542:	45 b3       	in	r20, 0x15	; 21
 544:	21 e0       	ldi	r18, 0x01	; 1
 546:	30 e0       	ldi	r19, 0x00	; 0
 548:	b9 01       	movw	r22, r18
 54a:	02 c0       	rjmp	.+4      	; 0x550 <DIO_WriteChannel+0xe4>
 54c:	66 0f       	add	r22, r22
 54e:	77 1f       	adc	r23, r23
 550:	8a 95       	dec	r24
 552:	e2 f7       	brpl	.-8      	; 0x54c <DIO_WriteChannel+0xe0>
 554:	cb 01       	movw	r24, r22
 556:	80 95       	com	r24
 558:	84 23       	and	r24, r20
 55a:	85 bb       	out	0x15, r24	; 21
			break;
 55c:	08 95       	ret
			case 3:
			CLR_BIT (PORTD , PIN);
 55e:	42 b3       	in	r20, 0x12	; 18
 560:	21 e0       	ldi	r18, 0x01	; 1
 562:	30 e0       	ldi	r19, 0x00	; 0
 564:	b9 01       	movw	r22, r18
 566:	02 c0       	rjmp	.+4      	; 0x56c <DIO_WriteChannel+0x100>
 568:	66 0f       	add	r22, r22
 56a:	77 1f       	adc	r23, r23
 56c:	8a 95       	dec	r24
 56e:	e2 f7       	brpl	.-8      	; 0x568 <DIO_WriteChannel+0xfc>
 570:	cb 01       	movw	r24, r22
 572:	80 95       	com	r24
 574:	84 23       	and	r24, r20
 576:	82 bb       	out	0x12, r24	; 18
 578:	08 95       	ret

0000057a <GPT_INIT>:
	
#endif  /*  #if  (TIMER0_STATE == TIMER_ENABLE) */

#if  (TIMER1_STATE == TIMER_ENABLE)
	#if   (TIMER1_MODE == NORMAL_MODE)
	CLR_BIT(TCCR1A,0);
 57a:	8f b5       	in	r24, 0x2f	; 47
 57c:	8e 7f       	andi	r24, 0xFE	; 254
 57e:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1A,1);
 580:	8f b5       	in	r24, 0x2f	; 47
 582:	8d 7f       	andi	r24, 0xFD	; 253
 584:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1A,3);
 586:	8f b5       	in	r24, 0x2f	; 47
 588:	87 7f       	andi	r24, 0xF7	; 247
 58a:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1A,4);
 58c:	8f b5       	in	r24, 0x2f	; 47
 58e:	8f 7e       	andi	r24, 0xEF	; 239
 590:	8f bd       	out	0x2f, r24	; 47
	 
	 #if (TIMER1_INTERRUPT_STATE == INTERRUPT_ENABLE)
	 SET_BIT(TIMSK,2);

	 #elif (TIMER1_INTERRUPT_STATE == INTERRUPT_DISABLE)
	 CLR_BIT(TIMSK,2);
 592:	89 b7       	in	r24, 0x39	; 57
 594:	8b 7f       	andi	r24, 0xFB	; 251
 596:	89 bf       	out	0x39, r24	; 57
	#elif (TIMER1_PRESCALER == CLK_SRC_PRESCALING_64		 )
	TCCR1B|=0x03;
	#elif (TIMER1_PRESCALER == CLK_SRC_PRESCALING_256		 )
	TCCR1B|=0x04;
	#elif (TIMER1_PRESCALER == CLK_SRC_PRESCALING_1024		 )
	TCCR1B|=0x05;
 598:	8e b5       	in	r24, 0x2e	; 46
 59a:	85 60       	ori	r24, 0x05	; 5
 59c:	8e bd       	out	0x2e, r24	; 46
 59e:	08 95       	ret

000005a0 <ICU_INIT>:
* \Parameters (out): None                                                      
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK                                  
*******************************************************************************/
void ICU_INIT(void){
	ICR1_16BIT_ACCESS =0X0000;
 5a0:	17 bc       	out	0x27, r1	; 39
 5a2:	16 bc       	out	0x26, r1	; 38
	/*ENABLE ICU RAISING DETECT*/
	TCCR1B |=0X40;
 5a4:	8e b5       	in	r24, 0x2e	; 46
 5a6:	80 64       	ori	r24, 0x40	; 64
 5a8:	8e bd       	out	0x2e, r24	; 46
	/*ENABLE ICU INTERRUPT*/
	TIMSK |=0X20;  
 5aa:	89 b7       	in	r24, 0x39	; 57
 5ac:	80 62       	ori	r24, 0x20	; 32
 5ae:	89 bf       	out	0x39, r24	; 57
 5b0:	08 95       	ret

000005b2 <ICU_CAPTURETIME>:
*                                    E_NOT_OK
*******************************************************************************/
uint32 ICU_CAPTURETIME(void){ 
	 static uint32 CALCULATED_TIME=0;
	
	if(capture_flag_g==2){
 5b2:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <capture_flag_g>
 5b6:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <capture_flag_g+0x1>
 5ba:	a0 91 a0 00 	lds	r26, 0x00A0	; 0x8000a0 <capture_flag_g+0x2>
 5be:	b0 91 a1 00 	lds	r27, 0x00A1	; 0x8000a1 <capture_flag_g+0x3>
 5c2:	02 97       	sbiw	r24, 0x02	; 2
 5c4:	a1 05       	cpc	r26, r1
 5c6:	b1 05       	cpc	r27, r1
 5c8:	09 f0       	breq	.+2      	; 0x5cc <ICU_CAPTURETIME+0x1a>
 5ca:	3f c0       	rjmp	.+126    	; 0x64a <ICU_CAPTURETIME+0x98>
		CALCULATED_TIME=(capture_reading_2_g-capture_reading_1_g)*64;
 5cc:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <capture_reading_2_g>
 5d0:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <capture_reading_2_g+0x1>
 5d4:	a0 91 a4 00 	lds	r26, 0x00A4	; 0x8000a4 <capture_reading_2_g+0x2>
 5d8:	b0 91 a5 00 	lds	r27, 0x00A5	; 0x8000a5 <capture_reading_2_g+0x3>
 5dc:	40 91 a6 00 	lds	r20, 0x00A6	; 0x8000a6 <capture_reading_1_g>
 5e0:	50 91 a7 00 	lds	r21, 0x00A7	; 0x8000a7 <capture_reading_1_g+0x1>
 5e4:	60 91 a8 00 	lds	r22, 0x00A8	; 0x8000a8 <capture_reading_1_g+0x2>
 5e8:	70 91 a9 00 	lds	r23, 0x00A9	; 0x8000a9 <capture_reading_1_g+0x3>
 5ec:	84 1b       	sub	r24, r20
 5ee:	95 0b       	sbc	r25, r21
 5f0:	a6 0b       	sbc	r26, r22
 5f2:	b7 0b       	sbc	r27, r23
 5f4:	88 0f       	add	r24, r24
 5f6:	99 1f       	adc	r25, r25
 5f8:	aa 1f       	adc	r26, r26
 5fa:	bb 1f       	adc	r27, r27
 5fc:	88 0f       	add	r24, r24
 5fe:	99 1f       	adc	r25, r25
 600:	aa 1f       	adc	r26, r26
 602:	bb 1f       	adc	r27, r27
 604:	88 0f       	add	r24, r24
 606:	99 1f       	adc	r25, r25
 608:	aa 1f       	adc	r26, r26
 60a:	bb 1f       	adc	r27, r27
 60c:	88 0f       	add	r24, r24
 60e:	99 1f       	adc	r25, r25
 610:	aa 1f       	adc	r26, r26
 612:	bb 1f       	adc	r27, r27
 614:	88 0f       	add	r24, r24
 616:	99 1f       	adc	r25, r25
 618:	aa 1f       	adc	r26, r26
 61a:	bb 1f       	adc	r27, r27
 61c:	88 0f       	add	r24, r24
 61e:	99 1f       	adc	r25, r25
 620:	aa 1f       	adc	r26, r26
 622:	bb 1f       	adc	r27, r27
 624:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <CALCULATED_TIME.1587>
 628:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <CALCULATED_TIME.1587+0x1>
 62c:	a0 93 9c 00 	sts	0x009C, r26	; 0x80009c <CALCULATED_TIME.1587+0x2>
 630:	b0 93 9d 00 	sts	0x009D, r27	; 0x80009d <CALCULATED_TIME.1587+0x3>
		capture_flag_g=0;
 634:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <capture_flag_g>
 638:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <capture_flag_g+0x1>
 63c:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <capture_flag_g+0x2>
 640:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <capture_flag_g+0x3>
		/*enable icu inturrpt*/
		 TIMSK|=0x20;
 644:	89 b7       	in	r24, 0x39	; 57
 646:	80 62       	ori	r24, 0x20	; 32
 648:	89 bf       	out	0x39, r24	; 57
	}
	return CALCULATED_TIME;
 64a:	60 91 9a 00 	lds	r22, 0x009A	; 0x80009a <CALCULATED_TIME.1587>
 64e:	70 91 9b 00 	lds	r23, 0x009B	; 0x80009b <CALCULATED_TIME.1587+0x1>
 652:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <CALCULATED_TIME.1587+0x2>
 656:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <CALCULATED_TIME.1587+0x3>
}
 65a:	08 95       	ret

0000065c <IRQH_SetGlobalInterrupts>:
*                                    E_NOT_OK
*******************************************************************************/

void IRQH_SetCallBack (void(*p)(void))
{
	ptr = p;
 65c:	88 23       	and	r24, r24
 65e:	31 f0       	breq	.+12     	; 0x66c <IRQH_SetGlobalInterrupts+0x10>
 660:	81 30       	cpi	r24, 0x01	; 1
 662:	39 f4       	brne	.+14     	; 0x672 <IRQH_SetGlobalInterrupts+0x16>
 664:	8f b7       	in	r24, 0x3f	; 63
 666:	80 68       	ori	r24, 0x80	; 128
 668:	8f bf       	out	0x3f, r24	; 63
 66a:	08 95       	ret
 66c:	8f b7       	in	r24, 0x3f	; 63
 66e:	8f 77       	andi	r24, 0x7F	; 127
 670:	8f bf       	out	0x3f, r24	; 63
 672:	08 95       	ret

00000674 <__vector_1>:
}

ISR(INT0_vect)
{
 674:	1f 92       	push	r1
 676:	0f 92       	push	r0
 678:	0f b6       	in	r0, 0x3f	; 63
 67a:	0f 92       	push	r0
 67c:	11 24       	eor	r1, r1
 67e:	2f 93       	push	r18
 680:	3f 93       	push	r19
 682:	4f 93       	push	r20
 684:	5f 93       	push	r21
 686:	6f 93       	push	r22
 688:	7f 93       	push	r23
 68a:	8f 93       	push	r24
 68c:	9f 93       	push	r25
 68e:	af 93       	push	r26
 690:	bf 93       	push	r27
 692:	ef 93       	push	r30
 694:	ff 93       	push	r31
	(*ptr)();
 696:	e0 91 ab 00 	lds	r30, 0x00AB	; 0x8000ab <ptr>
 69a:	f0 91 ac 00 	lds	r31, 0x00AC	; 0x8000ac <ptr+0x1>
 69e:	09 95       	icall
}
 6a0:	ff 91       	pop	r31
 6a2:	ef 91       	pop	r30
 6a4:	bf 91       	pop	r27
 6a6:	af 91       	pop	r26
 6a8:	9f 91       	pop	r25
 6aa:	8f 91       	pop	r24
 6ac:	7f 91       	pop	r23
 6ae:	6f 91       	pop	r22
 6b0:	5f 91       	pop	r21
 6b2:	4f 91       	pop	r20
 6b4:	3f 91       	pop	r19
 6b6:	2f 91       	pop	r18
 6b8:	0f 90       	pop	r0
 6ba:	0f be       	out	0x3f, r0	; 63
 6bc:	0f 90       	pop	r0
 6be:	1f 90       	pop	r1
 6c0:	18 95       	reti

000006c2 <__vector_16>:

ISR(ADC_vect)
{
 6c2:	1f 92       	push	r1
 6c4:	0f 92       	push	r0
 6c6:	0f b6       	in	r0, 0x3f	; 63
 6c8:	0f 92       	push	r0
 6ca:	11 24       	eor	r1, r1
 6cc:	2f 93       	push	r18
 6ce:	3f 93       	push	r19
 6d0:	4f 93       	push	r20
 6d2:	5f 93       	push	r21
 6d4:	8f 93       	push	r24
 6d6:	9f 93       	push	r25
 6d8:	af 93       	push	r26
 6da:	bf 93       	push	r27
	ADC_Vin_Value_mv = (ADC_INPUT_16BIT_ACCESS * 5000) / 1024;
 6dc:	44 b1       	in	r20, 0x04	; 4
 6de:	55 b1       	in	r21, 0x05	; 5
 6e0:	28 e8       	ldi	r18, 0x88	; 136
 6e2:	33 e1       	ldi	r19, 0x13	; 19
 6e4:	42 9f       	mul	r20, r18
 6e6:	c0 01       	movw	r24, r0
 6e8:	43 9f       	mul	r20, r19
 6ea:	90 0d       	add	r25, r0
 6ec:	52 9f       	mul	r21, r18
 6ee:	90 0d       	add	r25, r0
 6f0:	11 24       	eor	r1, r1
 6f2:	89 2f       	mov	r24, r25
 6f4:	99 27       	eor	r25, r25
 6f6:	86 95       	lsr	r24
 6f8:	86 95       	lsr	r24
 6fa:	a0 e0       	ldi	r26, 0x00	; 0
 6fc:	b0 e0       	ldi	r27, 0x00	; 0
 6fe:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <ADC_Vin_Value_mv>
 702:	90 93 ae 00 	sts	0x00AE, r25	; 0x8000ae <ADC_Vin_Value_mv+0x1>
 706:	a0 93 af 00 	sts	0x00AF, r26	; 0x8000af <ADC_Vin_Value_mv+0x2>
 70a:	b0 93 b0 00 	sts	0x00B0, r27	; 0x8000b0 <ADC_Vin_Value_mv+0x3>
}
 70e:	bf 91       	pop	r27
 710:	af 91       	pop	r26
 712:	9f 91       	pop	r25
 714:	8f 91       	pop	r24
 716:	5f 91       	pop	r21
 718:	4f 91       	pop	r20
 71a:	3f 91       	pop	r19
 71c:	2f 91       	pop	r18
 71e:	0f 90       	pop	r0
 720:	0f be       	out	0x3f, r0	; 63
 722:	0f 90       	pop	r0
 724:	1f 90       	pop	r1
 726:	18 95       	reti

00000728 <__vector_11>:

ISR(TIMER0_OVF_vect){
 728:	1f 92       	push	r1
 72a:	0f 92       	push	r0
 72c:	0f b6       	in	r0, 0x3f	; 63
 72e:	0f 92       	push	r0
 730:	11 24       	eor	r1, r1
 732:	2f 93       	push	r18
 734:	3f 93       	push	r19
 736:	4f 93       	push	r20
 738:	5f 93       	push	r21
 73a:	6f 93       	push	r22
 73c:	7f 93       	push	r23
 73e:	8f 93       	push	r24
 740:	9f 93       	push	r25
 742:	af 93       	push	r26
 744:	bf 93       	push	r27
 746:	ef 93       	push	r30
 748:	ff 93       	push	r31
		  static uint8 ovf_interrupt_cnt=0;
		 ovf_interrupt_cnt++;
 74a:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <ovf_interrupt_cnt.1655>
 74e:	8f 5f       	subi	r24, 0xFF	; 255
 750:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <ovf_interrupt_cnt.1655>
		 if(ovf_interrupt_cnt==TIMER_NUMBER_OVERFLOWS_G){
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	a0 e0       	ldi	r26, 0x00	; 0
 758:	b0 e0       	ldi	r27, 0x00	; 0
 75a:	40 91 96 00 	lds	r20, 0x0096	; 0x800096 <TIMER_NUMBER_OVERFLOWS_G>
 75e:	50 91 97 00 	lds	r21, 0x0097	; 0x800097 <TIMER_NUMBER_OVERFLOWS_G+0x1>
 762:	60 91 98 00 	lds	r22, 0x0098	; 0x800098 <TIMER_NUMBER_OVERFLOWS_G+0x2>
 766:	70 91 99 00 	lds	r23, 0x0099	; 0x800099 <TIMER_NUMBER_OVERFLOWS_G+0x3>
 76a:	84 17       	cp	r24, r20
 76c:	95 07       	cpc	r25, r21
 76e:	a6 07       	cpc	r26, r22
 770:	b7 07       	cpc	r27, r23
 772:	51 f4       	brne	.+20     	; 0x788 <__vector_11+0x60>
			 (*ptr)();
 774:	e0 91 ab 00 	lds	r30, 0x00AB	; 0x8000ab <ptr>
 778:	f0 91 ac 00 	lds	r31, 0x00AC	; 0x8000ac <ptr+0x1>
 77c:	09 95       	icall
			 ovf_interrupt_cnt=0;
 77e:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <ovf_interrupt_cnt.1655>
			 TCNT0=TIMER0_INIT_VALUE_G;
 782:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
 786:	82 bf       	out	0x32, r24	; 50
		 }
		  
		
	
}
 788:	ff 91       	pop	r31
 78a:	ef 91       	pop	r30
 78c:	bf 91       	pop	r27
 78e:	af 91       	pop	r26
 790:	9f 91       	pop	r25
 792:	8f 91       	pop	r24
 794:	7f 91       	pop	r23
 796:	6f 91       	pop	r22
 798:	5f 91       	pop	r21
 79a:	4f 91       	pop	r20
 79c:	3f 91       	pop	r19
 79e:	2f 91       	pop	r18
 7a0:	0f 90       	pop	r0
 7a2:	0f be       	out	0x3f, r0	; 63
 7a4:	0f 90       	pop	r0
 7a6:	1f 90       	pop	r1
 7a8:	18 95       	reti

000007aa <__vector_7>:

ISR (TIMER1_COMPA_vect){
 7aa:	1f 92       	push	r1
 7ac:	0f 92       	push	r0
 7ae:	0f b6       	in	r0, 0x3f	; 63
 7b0:	0f 92       	push	r0
 7b2:	11 24       	eor	r1, r1
 7b4:	2f 93       	push	r18
 7b6:	3f 93       	push	r19
 7b8:	4f 93       	push	r20
 7ba:	5f 93       	push	r21
 7bc:	6f 93       	push	r22
 7be:	7f 93       	push	r23
 7c0:	8f 93       	push	r24
 7c2:	9f 93       	push	r25
 7c4:	af 93       	push	r26
 7c6:	bf 93       	push	r27
 7c8:	ef 93       	push	r30
 7ca:	ff 93       	push	r31
	(*ptr)();
 7cc:	e0 91 ab 00 	lds	r30, 0x00AB	; 0x8000ab <ptr>
 7d0:	f0 91 ac 00 	lds	r31, 0x00AC	; 0x8000ac <ptr+0x1>
 7d4:	09 95       	icall
}
 7d6:	ff 91       	pop	r31
 7d8:	ef 91       	pop	r30
 7da:	bf 91       	pop	r27
 7dc:	af 91       	pop	r26
 7de:	9f 91       	pop	r25
 7e0:	8f 91       	pop	r24
 7e2:	7f 91       	pop	r23
 7e4:	6f 91       	pop	r22
 7e6:	5f 91       	pop	r21
 7e8:	4f 91       	pop	r20
 7ea:	3f 91       	pop	r19
 7ec:	2f 91       	pop	r18
 7ee:	0f 90       	pop	r0
 7f0:	0f be       	out	0x3f, r0	; 63
 7f2:	0f 90       	pop	r0
 7f4:	1f 90       	pop	r1
 7f6:	18 95       	reti

000007f8 <__vector_9>:

ISR(TIMER1_OVF_vect){
 7f8:	1f 92       	push	r1
 7fa:	0f 92       	push	r0
 7fc:	0f b6       	in	r0, 0x3f	; 63
 7fe:	0f 92       	push	r0
 800:	11 24       	eor	r1, r1
 802:	8f 93       	push	r24
 804:	9f 93       	push	r25
 806:	af 93       	push	r26
 808:	bf 93       	push	r27
	TIMER1_NUMBER_OVERFLOWS_G++;
 80a:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <TIMER1_NUMBER_OVERFLOWS_G>
 80e:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <TIMER1_NUMBER_OVERFLOWS_G+0x1>
 812:	a0 91 b3 00 	lds	r26, 0x00B3	; 0x8000b3 <TIMER1_NUMBER_OVERFLOWS_G+0x2>
 816:	b0 91 b4 00 	lds	r27, 0x00B4	; 0x8000b4 <TIMER1_NUMBER_OVERFLOWS_G+0x3>
 81a:	01 96       	adiw	r24, 0x01	; 1
 81c:	a1 1d       	adc	r26, r1
 81e:	b1 1d       	adc	r27, r1
 820:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <TIMER1_NUMBER_OVERFLOWS_G>
 824:	90 93 b2 00 	sts	0x00B2, r25	; 0x8000b2 <TIMER1_NUMBER_OVERFLOWS_G+0x1>
 828:	a0 93 b3 00 	sts	0x00B3, r26	; 0x8000b3 <TIMER1_NUMBER_OVERFLOWS_G+0x2>
 82c:	b0 93 b4 00 	sts	0x00B4, r27	; 0x8000b4 <TIMER1_NUMBER_OVERFLOWS_G+0x3>
	
	
}
 830:	bf 91       	pop	r27
 832:	af 91       	pop	r26
 834:	9f 91       	pop	r25
 836:	8f 91       	pop	r24
 838:	0f 90       	pop	r0
 83a:	0f be       	out	0x3f, r0	; 63
 83c:	0f 90       	pop	r0
 83e:	1f 90       	pop	r1
 840:	18 95       	reti

00000842 <__vector_6>:


ISR (TIMER1_CAPT_vect){
 842:	1f 92       	push	r1
 844:	0f 92       	push	r0
 846:	0f b6       	in	r0, 0x3f	; 63
 848:	0f 92       	push	r0
 84a:	11 24       	eor	r1, r1
 84c:	2f 93       	push	r18
 84e:	3f 93       	push	r19
 850:	8f 93       	push	r24
 852:	9f 93       	push	r25
 854:	af 93       	push	r26
 856:	bf 93       	push	r27
	capture_flag_g++;
 858:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <capture_flag_g>
 85c:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <capture_flag_g+0x1>
 860:	a0 91 a0 00 	lds	r26, 0x00A0	; 0x8000a0 <capture_flag_g+0x2>
 864:	b0 91 a1 00 	lds	r27, 0x00A1	; 0x8000a1 <capture_flag_g+0x3>
 868:	01 96       	adiw	r24, 0x01	; 1
 86a:	a1 1d       	adc	r26, r1
 86c:	b1 1d       	adc	r27, r1
 86e:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <capture_flag_g>
 872:	90 93 9f 00 	sts	0x009F, r25	; 0x80009f <capture_flag_g+0x1>
 876:	a0 93 a0 00 	sts	0x00A0, r26	; 0x8000a0 <capture_flag_g+0x2>
 87a:	b0 93 a1 00 	sts	0x00A1, r27	; 0x8000a1 <capture_flag_g+0x3>
	if(capture_flag_g==1){
 87e:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <capture_flag_g>
 882:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <capture_flag_g+0x1>
 886:	a0 91 a0 00 	lds	r26, 0x00A0	; 0x8000a0 <capture_flag_g+0x2>
 88a:	b0 91 a1 00 	lds	r27, 0x00A1	; 0x8000a1 <capture_flag_g+0x3>
 88e:	01 97       	sbiw	r24, 0x01	; 1
 890:	a1 05       	cpc	r26, r1
 892:	b1 05       	cpc	r27, r1
 894:	c1 f4       	brne	.+48     	; 0x8c6 <__stack+0x67>
		capture_reading_1_g=ICR1_16BIT_ACCESS;
 896:	86 b5       	in	r24, 0x26	; 38
 898:	97 b5       	in	r25, 0x27	; 39
 89a:	a0 e0       	ldi	r26, 0x00	; 0
 89c:	b0 e0       	ldi	r27, 0x00	; 0
 89e:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <capture_reading_1_g>
 8a2:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <capture_reading_1_g+0x1>
 8a6:	a0 93 a8 00 	sts	0x00A8, r26	; 0x8000a8 <capture_reading_1_g+0x2>
 8aa:	b0 93 a9 00 	sts	0x00A9, r27	; 0x8000a9 <capture_reading_1_g+0x3>
		TIMER1_NUMBER_OVERFLOWS_G=0;
 8ae:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <TIMER1_NUMBER_OVERFLOWS_G>
 8b2:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <TIMER1_NUMBER_OVERFLOWS_G+0x1>
 8b6:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <TIMER1_NUMBER_OVERFLOWS_G+0x2>
 8ba:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <TIMER1_NUMBER_OVERFLOWS_G+0x3>
		/*DETECTION FAILING EDGE*/
		CLR_BIT(TCCR1B,6);
 8be:	8e b5       	in	r24, 0x2e	; 46
 8c0:	8f 7b       	andi	r24, 0xBF	; 191
 8c2:	8e bd       	out	0x2e, r24	; 46
 8c4:	2b c0       	rjmp	.+86     	; 0x91c <__stack+0xbd>
		
	}
	else if(capture_flag_g==2){
 8c6:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <capture_flag_g>
 8ca:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <capture_flag_g+0x1>
 8ce:	a0 91 a0 00 	lds	r26, 0x00A0	; 0x8000a0 <capture_flag_g+0x2>
 8d2:	b0 91 a1 00 	lds	r27, 0x00A1	; 0x8000a1 <capture_flag_g+0x3>
 8d6:	02 97       	sbiw	r24, 0x02	; 2
 8d8:	a1 05       	cpc	r26, r1
 8da:	b1 05       	cpc	r27, r1
 8dc:	f9 f4       	brne	.+62     	; 0x91c <__stack+0xbd>
			capture_reading_2_g=ICR1_16BIT_ACCESS+(TIMER1_NUMBER_OVERFLOWS_G*65536);
 8de:	26 b5       	in	r18, 0x26	; 38
 8e0:	37 b5       	in	r19, 0x27	; 39
 8e2:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <TIMER1_NUMBER_OVERFLOWS_G>
 8e6:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <TIMER1_NUMBER_OVERFLOWS_G+0x1>
 8ea:	a0 91 b3 00 	lds	r26, 0x00B3	; 0x8000b3 <TIMER1_NUMBER_OVERFLOWS_G+0x2>
 8ee:	b0 91 b4 00 	lds	r27, 0x00B4	; 0x8000b4 <TIMER1_NUMBER_OVERFLOWS_G+0x3>
 8f2:	dc 01       	movw	r26, r24
 8f4:	99 27       	eor	r25, r25
 8f6:	88 27       	eor	r24, r24
 8f8:	82 0f       	add	r24, r18
 8fa:	93 1f       	adc	r25, r19
 8fc:	a1 1d       	adc	r26, r1
 8fe:	b1 1d       	adc	r27, r1
 900:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <capture_reading_2_g>
 904:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <capture_reading_2_g+0x1>
 908:	a0 93 a4 00 	sts	0x00A4, r26	; 0x8000a4 <capture_reading_2_g+0x2>
 90c:	b0 93 a5 00 	sts	0x00A5, r27	; 0x8000a5 <capture_reading_2_g+0x3>
			/*detect rising edge*/
			TCCR1B|=0x40;
 910:	8e b5       	in	r24, 0x2e	; 46
 912:	80 64       	ori	r24, 0x40	; 64
 914:	8e bd       	out	0x2e, r24	; 46
			/*disable icu inturrpt*/
			CLR_BIT(TIMSK,5);
 916:	89 b7       	in	r24, 0x39	; 57
 918:	8f 7d       	andi	r24, 0xDF	; 223
 91a:	89 bf       	out	0x39, r24	; 57
			
		}
}
 91c:	bf 91       	pop	r27
 91e:	af 91       	pop	r26
 920:	9f 91       	pop	r25
 922:	8f 91       	pop	r24
 924:	3f 91       	pop	r19
 926:	2f 91       	pop	r18
 928:	0f 90       	pop	r0
 92a:	0f be       	out	0x3f, r0	; 63
 92c:	0f 90       	pop	r0
 92e:	1f 90       	pop	r1
 930:	18 95       	reti

00000932 <PORT_Init>:
 */ 

#include "PORT_Core.h"

void PORT_Init(void)
{
 932:	e0 e6       	ldi	r30, 0x60	; 96
 934:	f0 e0       	ldi	r31, 0x00	; 0
 936:	48 e8       	ldi	r20, 0x88	; 136
 938:	50 e0       	ldi	r21, 0x00	; 0
					case PORT_A:
					     CLR_BIT(DDRA , PIN);
					break;
					
					case PORT_B:
					     CLR_BIT(DDRB , PIN);
 93a:	61 e0       	ldi	r22, 0x01	; 1
 93c:	70 e0       	ldi	r23, 0x00	; 0
void PORT_Init(void)
{
	uint8 cntr=0 , PORT=0 , PIN =0 , DIR= 0;
	for(cntr = 0 ; cntr < DEFINED_PINS ; cntr++ )
	{
		PORT = PORT_Initialization[cntr].PIN_NUM/NUMBER_OF_PORT_PINS;
 93e:	80 81       	ld	r24, Z
 940:	98 2f       	mov	r25, r24
 942:	96 95       	lsr	r25
 944:	96 95       	lsr	r25
 946:	96 95       	lsr	r25
		PIN =  PORT_Initialization[cntr].PIN_NUM%NUMBER_OF_PORT_PINS;
 948:	87 70       	andi	r24, 0x07	; 7
		DIR =  PORT_Initialization[cntr].DIR;
		
		switch (DIR)
 94a:	21 81       	ldd	r18, Z+1	; 0x01
 94c:	22 23       	and	r18, r18
 94e:	19 f0       	breq	.+6      	; 0x956 <PORT_Init+0x24>
 950:	21 30       	cpi	r18, 0x01	; 1
 952:	c9 f1       	breq	.+114    	; 0x9c6 <PORT_Init+0x94>
 954:	6b c0       	rjmp	.+214    	; 0xa2c <PORT_Init+0xfa>
		{
			case PIN_DIR_INPUT :
			    switch (PORT)
 956:	91 30       	cpi	r25, 0x01	; 1
 958:	91 f0       	breq	.+36     	; 0x97e <PORT_Init+0x4c>
 95a:	28 f0       	brcs	.+10     	; 0x966 <PORT_Init+0x34>
 95c:	92 30       	cpi	r25, 0x02	; 2
 95e:	d9 f0       	breq	.+54     	; 0x996 <PORT_Init+0x64>
 960:	93 30       	cpi	r25, 0x03	; 3
 962:	29 f1       	breq	.+74     	; 0x9ae <PORT_Init+0x7c>
 964:	63 c0       	rjmp	.+198    	; 0xa2c <PORT_Init+0xfa>
				{
					case PORT_A:
					     CLR_BIT(DDRA , PIN);
 966:	9a b3       	in	r25, 0x1a	; 26
 968:	9b 01       	movw	r18, r22
 96a:	02 c0       	rjmp	.+4      	; 0x970 <PORT_Init+0x3e>
 96c:	22 0f       	add	r18, r18
 96e:	33 1f       	adc	r19, r19
 970:	8a 95       	dec	r24
 972:	e2 f7       	brpl	.-8      	; 0x96c <PORT_Init+0x3a>
 974:	82 2f       	mov	r24, r18
 976:	80 95       	com	r24
 978:	89 23       	and	r24, r25
 97a:	8a bb       	out	0x1a, r24	; 26
					break;
 97c:	57 c0       	rjmp	.+174    	; 0xa2c <PORT_Init+0xfa>
					
					case PORT_B:
					     CLR_BIT(DDRB , PIN);
 97e:	97 b3       	in	r25, 0x17	; 23
 980:	9b 01       	movw	r18, r22
 982:	02 c0       	rjmp	.+4      	; 0x988 <PORT_Init+0x56>
 984:	22 0f       	add	r18, r18
 986:	33 1f       	adc	r19, r19
 988:	8a 95       	dec	r24
 98a:	e2 f7       	brpl	.-8      	; 0x984 <PORT_Init+0x52>
 98c:	82 2f       	mov	r24, r18
 98e:	80 95       	com	r24
 990:	89 23       	and	r24, r25
 992:	87 bb       	out	0x17, r24	; 23
					break;
 994:	4b c0       	rjmp	.+150    	; 0xa2c <PORT_Init+0xfa>
					
					case PORT_C:
					     CLR_BIT(DDRC , PIN);
 996:	94 b3       	in	r25, 0x14	; 20
 998:	9b 01       	movw	r18, r22
 99a:	02 c0       	rjmp	.+4      	; 0x9a0 <PORT_Init+0x6e>
 99c:	22 0f       	add	r18, r18
 99e:	33 1f       	adc	r19, r19
 9a0:	8a 95       	dec	r24
 9a2:	e2 f7       	brpl	.-8      	; 0x99c <PORT_Init+0x6a>
 9a4:	82 2f       	mov	r24, r18
 9a6:	80 95       	com	r24
 9a8:	89 23       	and	r24, r25
 9aa:	84 bb       	out	0x14, r24	; 20
					break;
 9ac:	3f c0       	rjmp	.+126    	; 0xa2c <PORT_Init+0xfa>
					
					case PORT_D:
					     CLR_BIT(DDRD , PIN);
 9ae:	91 b3       	in	r25, 0x11	; 17
 9b0:	9b 01       	movw	r18, r22
 9b2:	02 c0       	rjmp	.+4      	; 0x9b8 <PORT_Init+0x86>
 9b4:	22 0f       	add	r18, r18
 9b6:	33 1f       	adc	r19, r19
 9b8:	8a 95       	dec	r24
 9ba:	e2 f7       	brpl	.-8      	; 0x9b4 <PORT_Init+0x82>
 9bc:	82 2f       	mov	r24, r18
 9be:	80 95       	com	r24
 9c0:	89 23       	and	r24, r25
 9c2:	81 bb       	out	0x11, r24	; 17
					break;
 9c4:	33 c0       	rjmp	.+102    	; 0xa2c <PORT_Init+0xfa>
					break;
				}
			break;
			
			case PIN_DIR_OUTPUT :
			    switch (PORT)
 9c6:	91 30       	cpi	r25, 0x01	; 1
 9c8:	89 f0       	breq	.+34     	; 0x9ec <PORT_Init+0xba>
 9ca:	28 f0       	brcs	.+10     	; 0x9d6 <PORT_Init+0xa4>
 9cc:	92 30       	cpi	r25, 0x02	; 2
 9ce:	c9 f0       	breq	.+50     	; 0xa02 <PORT_Init+0xd0>
 9d0:	93 30       	cpi	r25, 0x03	; 3
 9d2:	11 f1       	breq	.+68     	; 0xa18 <PORT_Init+0xe6>
 9d4:	2b c0       	rjmp	.+86     	; 0xa2c <PORT_Init+0xfa>
			    {
				    case PORT_A:
				    SET_BIT(DDRA , PIN);
 9d6:	2a b3       	in	r18, 0x1a	; 26
 9d8:	db 01       	movw	r26, r22
 9da:	02 c0       	rjmp	.+4      	; 0x9e0 <PORT_Init+0xae>
 9dc:	aa 0f       	add	r26, r26
 9de:	bb 1f       	adc	r27, r27
 9e0:	8a 95       	dec	r24
 9e2:	e2 f7       	brpl	.-8      	; 0x9dc <PORT_Init+0xaa>
 9e4:	cd 01       	movw	r24, r26
 9e6:	82 2b       	or	r24, r18
 9e8:	8a bb       	out	0x1a, r24	; 26
				    break;
 9ea:	20 c0       	rjmp	.+64     	; 0xa2c <PORT_Init+0xfa>
				    
				    case PORT_B:
				    SET_BIT(DDRB , PIN);
 9ec:	27 b3       	in	r18, 0x17	; 23
 9ee:	db 01       	movw	r26, r22
 9f0:	02 c0       	rjmp	.+4      	; 0x9f6 <PORT_Init+0xc4>
 9f2:	aa 0f       	add	r26, r26
 9f4:	bb 1f       	adc	r27, r27
 9f6:	8a 95       	dec	r24
 9f8:	e2 f7       	brpl	.-8      	; 0x9f2 <PORT_Init+0xc0>
 9fa:	cd 01       	movw	r24, r26
 9fc:	82 2b       	or	r24, r18
 9fe:	87 bb       	out	0x17, r24	; 23
				    break;
 a00:	15 c0       	rjmp	.+42     	; 0xa2c <PORT_Init+0xfa>
				    
				    case PORT_C:
				    SET_BIT(DDRC , PIN);
 a02:	24 b3       	in	r18, 0x14	; 20
 a04:	db 01       	movw	r26, r22
 a06:	02 c0       	rjmp	.+4      	; 0xa0c <PORT_Init+0xda>
 a08:	aa 0f       	add	r26, r26
 a0a:	bb 1f       	adc	r27, r27
 a0c:	8a 95       	dec	r24
 a0e:	e2 f7       	brpl	.-8      	; 0xa08 <PORT_Init+0xd6>
 a10:	cd 01       	movw	r24, r26
 a12:	82 2b       	or	r24, r18
 a14:	84 bb       	out	0x14, r24	; 20
				    break;
 a16:	0a c0       	rjmp	.+20     	; 0xa2c <PORT_Init+0xfa>
				    
				    case PORT_D:
				    SET_BIT(DDRD , PIN);
 a18:	21 b3       	in	r18, 0x11	; 17
 a1a:	db 01       	movw	r26, r22
 a1c:	02 c0       	rjmp	.+4      	; 0xa22 <PORT_Init+0xf0>
 a1e:	aa 0f       	add	r26, r26
 a20:	bb 1f       	adc	r27, r27
 a22:	8a 95       	dec	r24
 a24:	e2 f7       	brpl	.-8      	; 0xa1e <PORT_Init+0xec>
 a26:	cd 01       	movw	r24, r26
 a28:	82 2b       	or	r24, r18
 a2a:	81 bb       	out	0x11, r24	; 17
 a2c:	32 96       	adiw	r30, 0x02	; 2
#include "PORT_Core.h"

void PORT_Init(void)
{
	uint8 cntr=0 , PORT=0 , PIN =0 , DIR= 0;
	for(cntr = 0 ; cntr < DEFINED_PINS ; cntr++ )
 a2e:	e4 17       	cp	r30, r20
 a30:	f5 07       	cpc	r31, r21
 a32:	09 f0       	breq	.+2      	; 0xa36 <PORT_Init+0x104>
 a34:	84 cf       	rjmp	.-248    	; 0x93e <PORT_Init+0xc>
			
			default:
			break;
		}
	}
 a36:	08 95       	ret

00000a38 <__fixunssfsi>:
 a38:	0e 94 90 05 	call	0xb20	; 0xb20 <__fp_splitA>
 a3c:	88 f0       	brcs	.+34     	; 0xa60 <__fixunssfsi+0x28>
 a3e:	9f 57       	subi	r25, 0x7F	; 127
 a40:	98 f0       	brcs	.+38     	; 0xa68 <__fixunssfsi+0x30>
 a42:	b9 2f       	mov	r27, r25
 a44:	99 27       	eor	r25, r25
 a46:	b7 51       	subi	r27, 0x17	; 23
 a48:	b0 f0       	brcs	.+44     	; 0xa76 <__fixunssfsi+0x3e>
 a4a:	e1 f0       	breq	.+56     	; 0xa84 <__fixunssfsi+0x4c>
 a4c:	66 0f       	add	r22, r22
 a4e:	77 1f       	adc	r23, r23
 a50:	88 1f       	adc	r24, r24
 a52:	99 1f       	adc	r25, r25
 a54:	1a f0       	brmi	.+6      	; 0xa5c <__fixunssfsi+0x24>
 a56:	ba 95       	dec	r27
 a58:	c9 f7       	brne	.-14     	; 0xa4c <__fixunssfsi+0x14>
 a5a:	14 c0       	rjmp	.+40     	; 0xa84 <__fixunssfsi+0x4c>
 a5c:	b1 30       	cpi	r27, 0x01	; 1
 a5e:	91 f0       	breq	.+36     	; 0xa84 <__fixunssfsi+0x4c>
 a60:	0e 94 aa 05 	call	0xb54	; 0xb54 <__fp_zero>
 a64:	b1 e0       	ldi	r27, 0x01	; 1
 a66:	08 95       	ret
 a68:	0c 94 aa 05 	jmp	0xb54	; 0xb54 <__fp_zero>
 a6c:	67 2f       	mov	r22, r23
 a6e:	78 2f       	mov	r23, r24
 a70:	88 27       	eor	r24, r24
 a72:	b8 5f       	subi	r27, 0xF8	; 248
 a74:	39 f0       	breq	.+14     	; 0xa84 <__fixunssfsi+0x4c>
 a76:	b9 3f       	cpi	r27, 0xF9	; 249
 a78:	cc f3       	brlt	.-14     	; 0xa6c <__fixunssfsi+0x34>
 a7a:	86 95       	lsr	r24
 a7c:	77 95       	ror	r23
 a7e:	67 95       	ror	r22
 a80:	b3 95       	inc	r27
 a82:	d9 f7       	brne	.-10     	; 0xa7a <__fixunssfsi+0x42>
 a84:	3e f4       	brtc	.+14     	; 0xa94 <__fixunssfsi+0x5c>
 a86:	90 95       	com	r25
 a88:	80 95       	com	r24
 a8a:	70 95       	com	r23
 a8c:	61 95       	neg	r22
 a8e:	7f 4f       	sbci	r23, 0xFF	; 255
 a90:	8f 4f       	sbci	r24, 0xFF	; 255
 a92:	9f 4f       	sbci	r25, 0xFF	; 255
 a94:	08 95       	ret

00000a96 <__floatunsisf>:
 a96:	e8 94       	clt
 a98:	09 c0       	rjmp	.+18     	; 0xaac <__floatsisf+0x12>

00000a9a <__floatsisf>:
 a9a:	97 fb       	bst	r25, 7
 a9c:	3e f4       	brtc	.+14     	; 0xaac <__floatsisf+0x12>
 a9e:	90 95       	com	r25
 aa0:	80 95       	com	r24
 aa2:	70 95       	com	r23
 aa4:	61 95       	neg	r22
 aa6:	7f 4f       	sbci	r23, 0xFF	; 255
 aa8:	8f 4f       	sbci	r24, 0xFF	; 255
 aaa:	9f 4f       	sbci	r25, 0xFF	; 255
 aac:	99 23       	and	r25, r25
 aae:	a9 f0       	breq	.+42     	; 0xada <__floatsisf+0x40>
 ab0:	f9 2f       	mov	r31, r25
 ab2:	96 e9       	ldi	r25, 0x96	; 150
 ab4:	bb 27       	eor	r27, r27
 ab6:	93 95       	inc	r25
 ab8:	f6 95       	lsr	r31
 aba:	87 95       	ror	r24
 abc:	77 95       	ror	r23
 abe:	67 95       	ror	r22
 ac0:	b7 95       	ror	r27
 ac2:	f1 11       	cpse	r31, r1
 ac4:	f8 cf       	rjmp	.-16     	; 0xab6 <__floatsisf+0x1c>
 ac6:	fa f4       	brpl	.+62     	; 0xb06 <__floatsisf+0x6c>
 ac8:	bb 0f       	add	r27, r27
 aca:	11 f4       	brne	.+4      	; 0xad0 <__floatsisf+0x36>
 acc:	60 ff       	sbrs	r22, 0
 ace:	1b c0       	rjmp	.+54     	; 0xb06 <__floatsisf+0x6c>
 ad0:	6f 5f       	subi	r22, 0xFF	; 255
 ad2:	7f 4f       	sbci	r23, 0xFF	; 255
 ad4:	8f 4f       	sbci	r24, 0xFF	; 255
 ad6:	9f 4f       	sbci	r25, 0xFF	; 255
 ad8:	16 c0       	rjmp	.+44     	; 0xb06 <__floatsisf+0x6c>
 ada:	88 23       	and	r24, r24
 adc:	11 f0       	breq	.+4      	; 0xae2 <__floatsisf+0x48>
 ade:	96 e9       	ldi	r25, 0x96	; 150
 ae0:	11 c0       	rjmp	.+34     	; 0xb04 <__floatsisf+0x6a>
 ae2:	77 23       	and	r23, r23
 ae4:	21 f0       	breq	.+8      	; 0xaee <__floatsisf+0x54>
 ae6:	9e e8       	ldi	r25, 0x8E	; 142
 ae8:	87 2f       	mov	r24, r23
 aea:	76 2f       	mov	r23, r22
 aec:	05 c0       	rjmp	.+10     	; 0xaf8 <__floatsisf+0x5e>
 aee:	66 23       	and	r22, r22
 af0:	71 f0       	breq	.+28     	; 0xb0e <__floatsisf+0x74>
 af2:	96 e8       	ldi	r25, 0x86	; 134
 af4:	86 2f       	mov	r24, r22
 af6:	70 e0       	ldi	r23, 0x00	; 0
 af8:	60 e0       	ldi	r22, 0x00	; 0
 afa:	2a f0       	brmi	.+10     	; 0xb06 <__floatsisf+0x6c>
 afc:	9a 95       	dec	r25
 afe:	66 0f       	add	r22, r22
 b00:	77 1f       	adc	r23, r23
 b02:	88 1f       	adc	r24, r24
 b04:	da f7       	brpl	.-10     	; 0xafc <__floatsisf+0x62>
 b06:	88 0f       	add	r24, r24
 b08:	96 95       	lsr	r25
 b0a:	87 95       	ror	r24
 b0c:	97 f9       	bld	r25, 7
 b0e:	08 95       	ret

00000b10 <__fp_split3>:
 b10:	57 fd       	sbrc	r21, 7
 b12:	90 58       	subi	r25, 0x80	; 128
 b14:	44 0f       	add	r20, r20
 b16:	55 1f       	adc	r21, r21
 b18:	59 f0       	breq	.+22     	; 0xb30 <__fp_splitA+0x10>
 b1a:	5f 3f       	cpi	r21, 0xFF	; 255
 b1c:	71 f0       	breq	.+28     	; 0xb3a <__fp_splitA+0x1a>
 b1e:	47 95       	ror	r20

00000b20 <__fp_splitA>:
 b20:	88 0f       	add	r24, r24
 b22:	97 fb       	bst	r25, 7
 b24:	99 1f       	adc	r25, r25
 b26:	61 f0       	breq	.+24     	; 0xb40 <__fp_splitA+0x20>
 b28:	9f 3f       	cpi	r25, 0xFF	; 255
 b2a:	79 f0       	breq	.+30     	; 0xb4a <__fp_splitA+0x2a>
 b2c:	87 95       	ror	r24
 b2e:	08 95       	ret
 b30:	12 16       	cp	r1, r18
 b32:	13 06       	cpc	r1, r19
 b34:	14 06       	cpc	r1, r20
 b36:	55 1f       	adc	r21, r21
 b38:	f2 cf       	rjmp	.-28     	; 0xb1e <__fp_split3+0xe>
 b3a:	46 95       	lsr	r20
 b3c:	f1 df       	rcall	.-30     	; 0xb20 <__fp_splitA>
 b3e:	08 c0       	rjmp	.+16     	; 0xb50 <__fp_splitA+0x30>
 b40:	16 16       	cp	r1, r22
 b42:	17 06       	cpc	r1, r23
 b44:	18 06       	cpc	r1, r24
 b46:	99 1f       	adc	r25, r25
 b48:	f1 cf       	rjmp	.-30     	; 0xb2c <__fp_splitA+0xc>
 b4a:	86 95       	lsr	r24
 b4c:	71 05       	cpc	r23, r1
 b4e:	61 05       	cpc	r22, r1
 b50:	08 94       	sec
 b52:	08 95       	ret

00000b54 <__fp_zero>:
 b54:	e8 94       	clt

00000b56 <__fp_szero>:
 b56:	bb 27       	eor	r27, r27
 b58:	66 27       	eor	r22, r22
 b5a:	77 27       	eor	r23, r23
 b5c:	cb 01       	movw	r24, r22
 b5e:	97 f9       	bld	r25, 7
 b60:	08 95       	ret

00000b62 <__mulsf3>:
 b62:	0e 94 c4 05 	call	0xb88	; 0xb88 <__mulsf3x>
 b66:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__fp_round>
 b6a:	0e 94 27 06 	call	0xc4e	; 0xc4e <__fp_pscA>
 b6e:	38 f0       	brcs	.+14     	; 0xb7e <__mulsf3+0x1c>
 b70:	0e 94 2e 06 	call	0xc5c	; 0xc5c <__fp_pscB>
 b74:	20 f0       	brcs	.+8      	; 0xb7e <__mulsf3+0x1c>
 b76:	95 23       	and	r25, r21
 b78:	11 f0       	breq	.+4      	; 0xb7e <__mulsf3+0x1c>
 b7a:	0c 94 1e 06 	jmp	0xc3c	; 0xc3c <__fp_inf>
 b7e:	0c 94 24 06 	jmp	0xc48	; 0xc48 <__fp_nan>
 b82:	11 24       	eor	r1, r1
 b84:	0c 94 ab 05 	jmp	0xb56	; 0xb56 <__fp_szero>

00000b88 <__mulsf3x>:
 b88:	0e 94 88 05 	call	0xb10	; 0xb10 <__fp_split3>
 b8c:	70 f3       	brcs	.-36     	; 0xb6a <__mulsf3+0x8>

00000b8e <__mulsf3_pse>:
 b8e:	95 9f       	mul	r25, r21
 b90:	c1 f3       	breq	.-16     	; 0xb82 <__mulsf3+0x20>
 b92:	95 0f       	add	r25, r21
 b94:	50 e0       	ldi	r21, 0x00	; 0
 b96:	55 1f       	adc	r21, r21
 b98:	62 9f       	mul	r22, r18
 b9a:	f0 01       	movw	r30, r0
 b9c:	72 9f       	mul	r23, r18
 b9e:	bb 27       	eor	r27, r27
 ba0:	f0 0d       	add	r31, r0
 ba2:	b1 1d       	adc	r27, r1
 ba4:	63 9f       	mul	r22, r19
 ba6:	aa 27       	eor	r26, r26
 ba8:	f0 0d       	add	r31, r0
 baa:	b1 1d       	adc	r27, r1
 bac:	aa 1f       	adc	r26, r26
 bae:	64 9f       	mul	r22, r20
 bb0:	66 27       	eor	r22, r22
 bb2:	b0 0d       	add	r27, r0
 bb4:	a1 1d       	adc	r26, r1
 bb6:	66 1f       	adc	r22, r22
 bb8:	82 9f       	mul	r24, r18
 bba:	22 27       	eor	r18, r18
 bbc:	b0 0d       	add	r27, r0
 bbe:	a1 1d       	adc	r26, r1
 bc0:	62 1f       	adc	r22, r18
 bc2:	73 9f       	mul	r23, r19
 bc4:	b0 0d       	add	r27, r0
 bc6:	a1 1d       	adc	r26, r1
 bc8:	62 1f       	adc	r22, r18
 bca:	83 9f       	mul	r24, r19
 bcc:	a0 0d       	add	r26, r0
 bce:	61 1d       	adc	r22, r1
 bd0:	22 1f       	adc	r18, r18
 bd2:	74 9f       	mul	r23, r20
 bd4:	33 27       	eor	r19, r19
 bd6:	a0 0d       	add	r26, r0
 bd8:	61 1d       	adc	r22, r1
 bda:	23 1f       	adc	r18, r19
 bdc:	84 9f       	mul	r24, r20
 bde:	60 0d       	add	r22, r0
 be0:	21 1d       	adc	r18, r1
 be2:	82 2f       	mov	r24, r18
 be4:	76 2f       	mov	r23, r22
 be6:	6a 2f       	mov	r22, r26
 be8:	11 24       	eor	r1, r1
 bea:	9f 57       	subi	r25, 0x7F	; 127
 bec:	50 40       	sbci	r21, 0x00	; 0
 bee:	9a f0       	brmi	.+38     	; 0xc16 <__mulsf3_pse+0x88>
 bf0:	f1 f0       	breq	.+60     	; 0xc2e <__mulsf3_pse+0xa0>
 bf2:	88 23       	and	r24, r24
 bf4:	4a f0       	brmi	.+18     	; 0xc08 <__mulsf3_pse+0x7a>
 bf6:	ee 0f       	add	r30, r30
 bf8:	ff 1f       	adc	r31, r31
 bfa:	bb 1f       	adc	r27, r27
 bfc:	66 1f       	adc	r22, r22
 bfe:	77 1f       	adc	r23, r23
 c00:	88 1f       	adc	r24, r24
 c02:	91 50       	subi	r25, 0x01	; 1
 c04:	50 40       	sbci	r21, 0x00	; 0
 c06:	a9 f7       	brne	.-22     	; 0xbf2 <__mulsf3_pse+0x64>
 c08:	9e 3f       	cpi	r25, 0xFE	; 254
 c0a:	51 05       	cpc	r21, r1
 c0c:	80 f0       	brcs	.+32     	; 0xc2e <__mulsf3_pse+0xa0>
 c0e:	0c 94 1e 06 	jmp	0xc3c	; 0xc3c <__fp_inf>
 c12:	0c 94 ab 05 	jmp	0xb56	; 0xb56 <__fp_szero>
 c16:	5f 3f       	cpi	r21, 0xFF	; 255
 c18:	e4 f3       	brlt	.-8      	; 0xc12 <__mulsf3_pse+0x84>
 c1a:	98 3e       	cpi	r25, 0xE8	; 232
 c1c:	d4 f3       	brlt	.-12     	; 0xc12 <__mulsf3_pse+0x84>
 c1e:	86 95       	lsr	r24
 c20:	77 95       	ror	r23
 c22:	67 95       	ror	r22
 c24:	b7 95       	ror	r27
 c26:	f7 95       	ror	r31
 c28:	e7 95       	ror	r30
 c2a:	9f 5f       	subi	r25, 0xFF	; 255
 c2c:	c1 f7       	brne	.-16     	; 0xc1e <__mulsf3_pse+0x90>
 c2e:	fe 2b       	or	r31, r30
 c30:	88 0f       	add	r24, r24
 c32:	91 1d       	adc	r25, r1
 c34:	96 95       	lsr	r25
 c36:	87 95       	ror	r24
 c38:	97 f9       	bld	r25, 7
 c3a:	08 95       	ret

00000c3c <__fp_inf>:
 c3c:	97 f9       	bld	r25, 7
 c3e:	9f 67       	ori	r25, 0x7F	; 127
 c40:	80 e8       	ldi	r24, 0x80	; 128
 c42:	70 e0       	ldi	r23, 0x00	; 0
 c44:	60 e0       	ldi	r22, 0x00	; 0
 c46:	08 95       	ret

00000c48 <__fp_nan>:
 c48:	9f ef       	ldi	r25, 0xFF	; 255
 c4a:	80 ec       	ldi	r24, 0xC0	; 192
 c4c:	08 95       	ret

00000c4e <__fp_pscA>:
 c4e:	00 24       	eor	r0, r0
 c50:	0a 94       	dec	r0
 c52:	16 16       	cp	r1, r22
 c54:	17 06       	cpc	r1, r23
 c56:	18 06       	cpc	r1, r24
 c58:	09 06       	cpc	r0, r25
 c5a:	08 95       	ret

00000c5c <__fp_pscB>:
 c5c:	00 24       	eor	r0, r0
 c5e:	0a 94       	dec	r0
 c60:	12 16       	cp	r1, r18
 c62:	13 06       	cpc	r1, r19
 c64:	14 06       	cpc	r1, r20
 c66:	05 06       	cpc	r0, r21
 c68:	08 95       	ret

00000c6a <__fp_round>:
 c6a:	09 2e       	mov	r0, r25
 c6c:	03 94       	inc	r0
 c6e:	00 0c       	add	r0, r0
 c70:	11 f4       	brne	.+4      	; 0xc76 <__fp_round+0xc>
 c72:	88 23       	and	r24, r24
 c74:	52 f0       	brmi	.+20     	; 0xc8a <__fp_round+0x20>
 c76:	bb 0f       	add	r27, r27
 c78:	40 f4       	brcc	.+16     	; 0xc8a <__fp_round+0x20>
 c7a:	bf 2b       	or	r27, r31
 c7c:	11 f4       	brne	.+4      	; 0xc82 <__fp_round+0x18>
 c7e:	60 ff       	sbrs	r22, 0
 c80:	04 c0       	rjmp	.+8      	; 0xc8a <__fp_round+0x20>
 c82:	6f 5f       	subi	r22, 0xFF	; 255
 c84:	7f 4f       	sbci	r23, 0xFF	; 255
 c86:	8f 4f       	sbci	r24, 0xFF	; 255
 c88:	9f 4f       	sbci	r25, 0xFF	; 255
 c8a:	08 95       	ret

00000c8c <__divmodsi4>:
 c8c:	05 2e       	mov	r0, r21
 c8e:	97 fb       	bst	r25, 7
 c90:	1e f4       	brtc	.+6      	; 0xc98 <__divmodsi4+0xc>
 c92:	00 94       	com	r0
 c94:	0e 94 5d 06 	call	0xcba	; 0xcba <__negsi2>
 c98:	57 fd       	sbrc	r21, 7
 c9a:	07 d0       	rcall	.+14     	; 0xcaa <__divmodsi4_neg2>
 c9c:	0e 94 65 06 	call	0xcca	; 0xcca <__udivmodsi4>
 ca0:	07 fc       	sbrc	r0, 7
 ca2:	03 d0       	rcall	.+6      	; 0xcaa <__divmodsi4_neg2>
 ca4:	4e f4       	brtc	.+18     	; 0xcb8 <__divmodsi4_exit>
 ca6:	0c 94 5d 06 	jmp	0xcba	; 0xcba <__negsi2>

00000caa <__divmodsi4_neg2>:
 caa:	50 95       	com	r21
 cac:	40 95       	com	r20
 cae:	30 95       	com	r19
 cb0:	21 95       	neg	r18
 cb2:	3f 4f       	sbci	r19, 0xFF	; 255
 cb4:	4f 4f       	sbci	r20, 0xFF	; 255
 cb6:	5f 4f       	sbci	r21, 0xFF	; 255

00000cb8 <__divmodsi4_exit>:
 cb8:	08 95       	ret

00000cba <__negsi2>:
 cba:	90 95       	com	r25
 cbc:	80 95       	com	r24
 cbe:	70 95       	com	r23
 cc0:	61 95       	neg	r22
 cc2:	7f 4f       	sbci	r23, 0xFF	; 255
 cc4:	8f 4f       	sbci	r24, 0xFF	; 255
 cc6:	9f 4f       	sbci	r25, 0xFF	; 255
 cc8:	08 95       	ret

00000cca <__udivmodsi4>:
 cca:	a1 e2       	ldi	r26, 0x21	; 33
 ccc:	1a 2e       	mov	r1, r26
 cce:	aa 1b       	sub	r26, r26
 cd0:	bb 1b       	sub	r27, r27
 cd2:	fd 01       	movw	r30, r26
 cd4:	0d c0       	rjmp	.+26     	; 0xcf0 <__udivmodsi4_ep>

00000cd6 <__udivmodsi4_loop>:
 cd6:	aa 1f       	adc	r26, r26
 cd8:	bb 1f       	adc	r27, r27
 cda:	ee 1f       	adc	r30, r30
 cdc:	ff 1f       	adc	r31, r31
 cde:	a2 17       	cp	r26, r18
 ce0:	b3 07       	cpc	r27, r19
 ce2:	e4 07       	cpc	r30, r20
 ce4:	f5 07       	cpc	r31, r21
 ce6:	20 f0       	brcs	.+8      	; 0xcf0 <__udivmodsi4_ep>
 ce8:	a2 1b       	sub	r26, r18
 cea:	b3 0b       	sbc	r27, r19
 cec:	e4 0b       	sbc	r30, r20
 cee:	f5 0b       	sbc	r31, r21

00000cf0 <__udivmodsi4_ep>:
 cf0:	66 1f       	adc	r22, r22
 cf2:	77 1f       	adc	r23, r23
 cf4:	88 1f       	adc	r24, r24
 cf6:	99 1f       	adc	r25, r25
 cf8:	1a 94       	dec	r1
 cfa:	69 f7       	brne	.-38     	; 0xcd6 <__udivmodsi4_loop>
 cfc:	60 95       	com	r22
 cfe:	70 95       	com	r23
 d00:	80 95       	com	r24
 d02:	90 95       	com	r25
 d04:	9b 01       	movw	r18, r22
 d06:	ac 01       	movw	r20, r24
 d08:	bd 01       	movw	r22, r26
 d0a:	cf 01       	movw	r24, r30
 d0c:	08 95       	ret

00000d0e <_exit>:
 d0e:	f8 94       	cli

00000d10 <__stop_program>:
 d10:	ff cf       	rjmp	.-2      	; 0xd10 <__stop_program>
